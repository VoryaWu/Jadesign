// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dSLRpGaFdpa3881hVR4F6A
// Component: nU_XA45pHXnVU
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Nav from "../../Nav"; // plasmic-import: uYEoDQL10wMkN/component
import Footer from "../../Footer"; // plasmic-import: 2SDesTRBRMXmd/component

import { useScreenVariants as useScreenVariantsanQ10NsY6B1Jy } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: AnQ10NsY6b1jy/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_jadesign.module.css"; // plasmic-import: dSLRpGaFdpa3881hVR4F6A/projectcss
import sty from "./PlasmicProject.module.css"; // plasmic-import: nU_XA45pHXnVU/css

export type PlasmicProject__VariantMembers = {};
export type PlasmicProject__VariantsArgs = {};
type VariantPropType = keyof PlasmicProject__VariantsArgs;
export const PlasmicProject__VariantProps = new Array<VariantPropType>();

export type PlasmicProject__ArgsType = {};
type ArgPropType = keyof PlasmicProject__ArgsType;
export const PlasmicProject__ArgProps = new Array<ArgPropType>();

export type PlasmicProject__OverridesType = {
  root?: p.Flex<"div">;
  headingTitle?: p.Flex<"div">;
  list?: p.Flex<"div">;
  li22?: p.Flex<"div">;
  blankpot8?: p.Flex<"div">;
  context8?: p.Flex<"div">;
  line8?: p.Flex<"div">;
  casetitle8?: p.Flex<"div">;
  img8?: p.Flex<"div">;
  li1?: p.Flex<"div">;
  blankpot?: p.Flex<"div">;
  context?: p.Flex<"div">;
  line?: p.Flex<"div">;
  casetitle?: p.Flex<"div">;
  li2?: p.Flex<"div">;
  blankpot3?: p.Flex<"div">;
  context3?: p.Flex<"div">;
  line3?: p.Flex<"div">;
  casetitle3?: p.Flex<"div">;
  img3?: p.Flex<"div">;
  li3?: p.Flex<"div">;
  blankpot4?: p.Flex<"div">;
  context4?: p.Flex<"div">;
  line4?: p.Flex<"div">;
  casetitle4?: p.Flex<"div">;
  img4?: p.Flex<"div">;
  li4?: p.Flex<"div">;
  blankpot5?: p.Flex<"div">;
  context5?: p.Flex<"div">;
  line5?: p.Flex<"div">;
  casetitle5?: p.Flex<"div">;
  img5?: p.Flex<"div">;
  li5?: p.Flex<"div">;
  blankpot6?: p.Flex<"div">;
  context6?: p.Flex<"div">;
  line6?: p.Flex<"div">;
  casetitle6?: p.Flex<"div">;
  img6?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultProjectProps {}

function PlasmicProject__RenderFunc(props: {
  variants: PlasmicProject__VariantsArgs;
  args: PlasmicProject__ArgsType;
  overrides: PlasmicProject__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsanQ10NsY6B1Jy()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicProject.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicProject.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicProject.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              sty.root
            )}
          >
            {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
              <div className={classNames(projectcss.all, sty.freeBox__tj7V9)}>
                <Nav className={classNames("__wab_instance", sty.nav__fguky)} />
              </div>
            ) : null}
            {true ? (
              <div
                data-plasmic-name={"headingTitle"}
                data-plasmic-override={overrides.headingTitle}
                className={classNames(projectcss.all, sty.headingTitle)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ts98A
                  )}
                >
                  {"PROJECT"}
                </div>
              </div>
            ) : null}
            {true ? (
              <div
                data-plasmic-name={"list"}
                data-plasmic-override={overrides.list}
                className={classNames(projectcss.all, sty.list)}
              >
                <div
                  data-plasmic-name={"li22"}
                  data-plasmic-override={overrides.li22}
                  className={classNames(projectcss.all, sty.li22)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobile") ? true : true
                  ) ? (
                    <div
                      data-plasmic-name={"blankpot8"}
                      data-plasmic-override={overrides.blankpot8}
                      className={classNames(projectcss.all, sty.blankpot8)}
                    />
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobile") ? true : true
                  ) ? (
                    <div
                      data-plasmic-name={"context8"}
                      data-plasmic-override={overrides.context8}
                      className={classNames(projectcss.all, sty.context8)}
                    >
                      <div
                        data-plasmic-name={"line8"}
                        data-plasmic-override={overrides.line8}
                        className={classNames(projectcss.all, sty.line8)}
                      />

                      <div
                        data-plasmic-name={"casetitle8"}
                        data-plasmic-override={overrides.casetitle8}
                        className={classNames(projectcss.all, sty.casetitle8)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__pDv4
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rl5Q
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobile")
                              ? "Big Screen Design"
                              : "Big Screen Design"}
                          </div>
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__peF9U
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobile")
                            ? "UI design"
                            : "UI design"}
                        </div>
                      </div>

                      <div
                        data-plasmic-name={"img8"}
                        data-plasmic-override={overrides.img8}
                        className={classNames(projectcss.all, sty.img8)}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__vkvm6)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("auto" as const)
                              : ("auto" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("100%" as const)
                              : ("100%" as const)
                          }
                          loading={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("lazy" as const)
                              : ("eager" as const)
                          }
                          src={{
                            src: "/plasmic/jadesign/images/污水处理云平台大屏png.png",
                            fullWidth: 3840,
                            fullHeight: 2160,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                    </div>
                  ) : null}
                </div>

                <div
                  data-plasmic-name={"li1"}
                  data-plasmic-override={overrides.li1}
                  className={classNames(projectcss.all, sty.li1)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobile") ? true : true
                  ) ? (
                    <div
                      data-plasmic-name={"blankpot"}
                      data-plasmic-override={overrides.blankpot}
                      className={classNames(projectcss.all, sty.blankpot)}
                    />
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobile") ? true : true
                  ) ? (
                    <div
                      data-plasmic-name={"context"}
                      data-plasmic-override={overrides.context}
                      className={classNames(projectcss.all, sty.context)}
                    >
                      <div
                        data-plasmic-name={"line"}
                        data-plasmic-override={overrides.line}
                        className={classNames(projectcss.all, sty.line)}
                      />

                      <div
                        data-plasmic-name={"casetitle"}
                        data-plasmic-override={overrides.casetitle}
                        className={classNames(projectcss.all, sty.casetitle)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___8BqgF
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobile")
                            ? "JiAN UI Redesign"
                            : "JiAN UI Redesign"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___92Ol6
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobile")
                            ? "UI design & non-commercial"
                            : "UI design & non-commercial"}
                        </div>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__oDqrt
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__rsPE)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("auto" as const)
                              : ("auto" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("100%" as const)
                              : ("100%" as const)
                          }
                          loading={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("lazy" as const)
                              : ("eager" as const)
                          }
                          src={{
                            src: "/plasmic/jadesign/images/jiAn01Png.png",
                            fullWidth: 1080,
                            fullHeight: 810,
                            aspectRatio: undefined
                          }}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__aiBnr)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("auto" as const)
                              : ("auto" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("100%" as const)
                              : ("100%" as const)
                          }
                          loading={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("lazy" as const)
                              : ("eager" as const)
                          }
                          src={{
                            src: "/plasmic/jadesign/images/jiAn02Png.png",
                            fullWidth: 1080,
                            fullHeight: 810,
                            aspectRatio: undefined
                          }}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___6QScc)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("auto" as const)
                              : ("auto" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("100%" as const)
                              : ("100%" as const)
                          }
                          loading={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("lazy" as const)
                              : ("eager" as const)
                          }
                          src={{
                            src: "/plasmic/jadesign/images/jiAn03Png.png",
                            fullWidth: 1080,
                            fullHeight: 810,
                            aspectRatio: undefined
                          }}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__ksQer)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("auto" as const)
                              : ("auto" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("100%" as const)
                              : ("100%" as const)
                          }
                          loading={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("lazy" as const)
                              : ("eager" as const)
                          }
                          src={{
                            src: "/plasmic/jadesign/images/jiAn04Png.png",
                            fullWidth: 1080,
                            fullHeight: 810,
                            aspectRatio: undefined
                          }}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__urvYl)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("auto" as const)
                              : ("auto" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("100%" as const)
                              : ("100%" as const)
                          }
                          loading={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("lazy" as const)
                              : ("eager" as const)
                          }
                          src={{
                            src: "/plasmic/jadesign/images/jiAn05Png.png",
                            fullWidth: 1080,
                            fullHeight: 810,
                            aspectRatio: undefined
                          }}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__k4S)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("auto" as const)
                              : ("auto" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("100%" as const)
                              : ("100%" as const)
                          }
                          loading={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("lazy" as const)
                              : ("eager" as const)
                          }
                          src={{
                            src: "/plasmic/jadesign/images/jiAn06Png.png",
                            fullWidth: 1080,
                            fullHeight: 810,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                    </div>
                  ) : null}
                </div>

                <div
                  data-plasmic-name={"li2"}
                  data-plasmic-override={overrides.li2}
                  className={classNames(projectcss.all, sty.li2)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobile") ? true : true
                  ) ? (
                    <div
                      data-plasmic-name={"blankpot3"}
                      data-plasmic-override={overrides.blankpot3}
                      className={classNames(projectcss.all, sty.blankpot3)}
                    />
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobile") ? true : true
                  ) ? (
                    <div
                      data-plasmic-name={"context3"}
                      data-plasmic-override={overrides.context3}
                      className={classNames(projectcss.all, sty.context3)}
                    >
                      <div
                        data-plasmic-name={"line3"}
                        data-plasmic-override={overrides.line3}
                        className={classNames(projectcss.all, sty.line3)}
                      />

                      <div
                        data-plasmic-name={"casetitle3"}
                        data-plasmic-override={overrides.casetitle3}
                        className={classNames(projectcss.all, sty.casetitle3)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__cbRy
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dSxvN
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobile")
                              ? "36 Days Of  Type"
                              : "36 Days Of  Type"}
                          </div>
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dJx4A
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobile")
                            ? "Font design"
                            : "Font design"}
                        </div>
                      </div>

                      <div
                        data-plasmic-name={"img3"}
                        data-plasmic-override={overrides.img3}
                        className={classNames(projectcss.all, sty.img3)}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__vwNe9)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("auto" as const)
                              : ("auto" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("100%" as const)
                              : ("100%" as const)
                          }
                          loading={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("lazy" as const)
                              : ("eager" as const)
                          }
                          src={{
                            src: "/plasmic/jadesign/images/_36Daysoftypepng.png",
                            fullWidth: 1420,
                            fullHeight: 2180,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                    </div>
                  ) : null}
                </div>

                <div
                  data-plasmic-name={"li3"}
                  data-plasmic-override={overrides.li3}
                  className={classNames(projectcss.all, sty.li3)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobile") ? true : true
                  ) ? (
                    <div
                      data-plasmic-name={"blankpot4"}
                      data-plasmic-override={overrides.blankpot4}
                      className={classNames(projectcss.all, sty.blankpot4)}
                    />
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobile") ? true : true
                  ) ? (
                    <div
                      data-plasmic-name={"context4"}
                      data-plasmic-override={overrides.context4}
                      className={classNames(projectcss.all, sty.context4)}
                    >
                      <div
                        data-plasmic-name={"line4"}
                        data-plasmic-override={overrides.line4}
                        className={classNames(projectcss.all, sty.line4)}
                      />

                      <div
                        data-plasmic-name={"casetitle4"}
                        data-plasmic-override={overrides.casetitle4}
                        className={classNames(projectcss.all, sty.casetitle4)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yqwnU
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ao5N
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobile")
                              ? "Personal brand Design"
                              : "Personal brand Design"}
                          </div>
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nk5Dr
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobile")
                            ? "brand design & Logo design"
                            : "brand design & Logo design"}
                        </div>
                      </div>

                      <div
                        data-plasmic-name={"img4"}
                        data-plasmic-override={overrides.img4}
                        className={classNames(projectcss.all, sty.img4)}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__pch7W)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("auto" as const)
                              : ("auto" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("100%" as const)
                              : ("100%" as const)
                          }
                          loading={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("lazy" as const)
                              : ("eager" as const)
                          }
                          src={{
                            src: "/plasmic/jadesign/images/b01Png.png",
                            fullWidth: 1920,
                            fullHeight: 1080,
                            aspectRatio: undefined
                          }}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__nwKaD)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("auto" as const)
                              : ("auto" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("100%" as const)
                              : ("100%" as const)
                          }
                          loading={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("lazy" as const)
                              : ("eager" as const)
                          }
                          src={{
                            src: "/plasmic/jadesign/images/b03Png.png",
                            fullWidth: 1920,
                            fullHeight: 1080,
                            aspectRatio: undefined
                          }}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___9MTg)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("auto" as const)
                              : ("auto" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("100%" as const)
                              : ("100%" as const)
                          }
                          loading={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("lazy" as const)
                              : ("eager" as const)
                          }
                          src={{
                            src: "/plasmic/jadesign/images/b02Png.png",
                            fullWidth: 1920,
                            fullHeight: 1080,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                    </div>
                  ) : null}
                </div>

                <div
                  data-plasmic-name={"li4"}
                  data-plasmic-override={overrides.li4}
                  className={classNames(projectcss.all, sty.li4)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobile") ? true : true
                  ) ? (
                    <div
                      data-plasmic-name={"blankpot5"}
                      data-plasmic-override={overrides.blankpot5}
                      className={classNames(projectcss.all, sty.blankpot5)}
                    />
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobile") ? true : true
                  ) ? (
                    <div
                      data-plasmic-name={"context5"}
                      data-plasmic-override={overrides.context5}
                      className={classNames(projectcss.all, sty.context5)}
                    >
                      <div
                        data-plasmic-name={"line5"}
                        data-plasmic-override={overrides.line5}
                        className={classNames(projectcss.all, sty.line5)}
                      />

                      <div
                        data-plasmic-name={"casetitle5"}
                        data-plasmic-override={overrides.casetitle5}
                        className={classNames(projectcss.all, sty.casetitle5)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__sEYdi
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rbgs
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobile")
                              ? "Origin - Outdoor Community"
                              : "Origin - Outdoor Community"}
                          </div>
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__uuyf1
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobile")
                            ? "UI design"
                            : "UI design"}
                        </div>
                      </div>

                      <div
                        data-plasmic-name={"img5"}
                        data-plasmic-override={overrides.img5}
                        className={classNames(projectcss.all, sty.img5)}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__mFFtX)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("auto" as const)
                              : ("auto" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("100%" as const)
                              : ("100%" as const)
                          }
                          loading={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("lazy" as const)
                              : ("eager" as const)
                          }
                          src={{
                            src: "/plasmic/jadesign/images/origin01Png.png",
                            fullWidth: 1080,
                            fullHeight: 768,
                            aspectRatio: undefined
                          }}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__ckRak)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("auto" as const)
                              : ("auto" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("100%" as const)
                              : ("100%" as const)
                          }
                          loading={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("lazy" as const)
                              : ("eager" as const)
                          }
                          src={{
                            src: "/plasmic/jadesign/images/origin02Png.png",
                            fullWidth: 1080,
                            fullHeight: 768,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                    </div>
                  ) : null}
                </div>

                <div
                  data-plasmic-name={"li5"}
                  data-plasmic-override={overrides.li5}
                  className={classNames(projectcss.all, sty.li5)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobile") ? true : true
                  ) ? (
                    <div
                      data-plasmic-name={"blankpot6"}
                      data-plasmic-override={overrides.blankpot6}
                      className={classNames(projectcss.all, sty.blankpot6)}
                    />
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobile") ? true : true
                  ) ? (
                    <div
                      data-plasmic-name={"context6"}
                      data-plasmic-override={overrides.context6}
                      className={classNames(projectcss.all, sty.context6)}
                    >
                      <div
                        data-plasmic-name={"line6"}
                        data-plasmic-override={overrides.line6}
                        className={classNames(projectcss.all, sty.line6)}
                      />

                      <div
                        data-plasmic-name={"casetitle6"}
                        data-plasmic-override={overrides.casetitle6}
                        className={classNames(projectcss.all, sty.casetitle6)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lXrl9
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dxONf
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobile")
                              ? "DZ Charger redesign"
                              : "DZ Charger redesign"}
                          </div>
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__oyHta
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobile")
                            ? "UI design & non-commercial & Redesign"
                            : "UI design & non-commercial & Redesign"}
                        </div>
                      </div>

                      <div
                        data-plasmic-name={"img6"}
                        data-plasmic-override={overrides.img6}
                        className={classNames(projectcss.all, sty.img6)}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__yManI)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("auto" as const)
                              : ("auto" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("100%" as const)
                              : ("100%" as const)
                          }
                          loading={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("lazy" as const)
                              : ("eager" as const)
                          }
                          src={{
                            src: "/plasmic/jadesign/images/dzrd01Png.png",
                            fullWidth: 2570,
                            fullHeight: 1926,
                            aspectRatio: undefined
                          }}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__rUr0L)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("auto" as const)
                              : ("auto" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("100%" as const)
                              : ("100%" as const)
                          }
                          loading={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? ("lazy" as const)
                              : ("eager" as const)
                          }
                          src={{
                            src: "/plasmic/jadesign/images/dzrd02Png.png",
                            fullWidth: 2570,
                            fullHeight: 1926,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                    </div>
                  ) : null}
                </div>
              </div>
            ) : null}

            <div className={classNames(projectcss.all, sty.freeBox__w86Fg)} />

            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headingTitle",
    "list",
    "li22",
    "blankpot8",
    "context8",
    "line8",
    "casetitle8",
    "img8",
    "li1",
    "blankpot",
    "context",
    "line",
    "casetitle",
    "li2",
    "blankpot3",
    "context3",
    "line3",
    "casetitle3",
    "img3",
    "li3",
    "blankpot4",
    "context4",
    "line4",
    "casetitle4",
    "img4",
    "li4",
    "blankpot5",
    "context5",
    "line5",
    "casetitle5",
    "img5",
    "li5",
    "blankpot6",
    "context6",
    "line6",
    "casetitle6",
    "img6",
    "footer"
  ],
  headingTitle: ["headingTitle"],
  list: [
    "list",
    "li22",
    "blankpot8",
    "context8",
    "line8",
    "casetitle8",
    "img8",
    "li1",
    "blankpot",
    "context",
    "line",
    "casetitle",
    "li2",
    "blankpot3",
    "context3",
    "line3",
    "casetitle3",
    "img3",
    "li3",
    "blankpot4",
    "context4",
    "line4",
    "casetitle4",
    "img4",
    "li4",
    "blankpot5",
    "context5",
    "line5",
    "casetitle5",
    "img5",
    "li5",
    "blankpot6",
    "context6",
    "line6",
    "casetitle6",
    "img6"
  ],
  li22: ["li22", "blankpot8", "context8", "line8", "casetitle8", "img8"],
  blankpot8: ["blankpot8"],
  context8: ["context8", "line8", "casetitle8", "img8"],
  line8: ["line8"],
  casetitle8: ["casetitle8"],
  img8: ["img8"],
  li1: ["li1", "blankpot", "context", "line", "casetitle"],
  blankpot: ["blankpot"],
  context: ["context", "line", "casetitle"],
  line: ["line"],
  casetitle: ["casetitle"],
  li2: ["li2", "blankpot3", "context3", "line3", "casetitle3", "img3"],
  blankpot3: ["blankpot3"],
  context3: ["context3", "line3", "casetitle3", "img3"],
  line3: ["line3"],
  casetitle3: ["casetitle3"],
  img3: ["img3"],
  li3: ["li3", "blankpot4", "context4", "line4", "casetitle4", "img4"],
  blankpot4: ["blankpot4"],
  context4: ["context4", "line4", "casetitle4", "img4"],
  line4: ["line4"],
  casetitle4: ["casetitle4"],
  img4: ["img4"],
  li4: ["li4", "blankpot5", "context5", "line5", "casetitle5", "img5"],
  blankpot5: ["blankpot5"],
  context5: ["context5", "line5", "casetitle5", "img5"],
  line5: ["line5"],
  casetitle5: ["casetitle5"],
  img5: ["img5"],
  li5: ["li5", "blankpot6", "context6", "line6", "casetitle6", "img6"],
  blankpot6: ["blankpot6"],
  context6: ["context6", "line6", "casetitle6", "img6"],
  line6: ["line6"],
  casetitle6: ["casetitle6"],
  img6: ["img6"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headingTitle: "div";
  list: "div";
  li22: "div";
  blankpot8: "div";
  context8: "div";
  line8: "div";
  casetitle8: "div";
  img8: "div";
  li1: "div";
  blankpot: "div";
  context: "div";
  line: "div";
  casetitle: "div";
  li2: "div";
  blankpot3: "div";
  context3: "div";
  line3: "div";
  casetitle3: "div";
  img3: "div";
  li3: "div";
  blankpot4: "div";
  context4: "div";
  line4: "div";
  casetitle4: "div";
  img4: "div";
  li4: "div";
  blankpot5: "div";
  context5: "div";
  line5: "div";
  casetitle5: "div";
  img5: "div";
  li5: "div";
  blankpot6: "div";
  context6: "div";
  line6: "div";
  casetitle6: "div";
  img6: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProject__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProject__VariantsArgs;
    args?: PlasmicProject__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProject__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProject__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProject__ArgProps,
          internalVariantPropNames: PlasmicProject__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicProject__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProject";
  } else {
    func.displayName = `PlasmicProject.${nodeName}`;
  }
  return func;
}

export const PlasmicProject = Object.assign(
  // Top-level PlasmicProject renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headingTitle: makeNodeComponent("headingTitle"),
    list: makeNodeComponent("list"),
    li22: makeNodeComponent("li22"),
    blankpot8: makeNodeComponent("blankpot8"),
    context8: makeNodeComponent("context8"),
    line8: makeNodeComponent("line8"),
    casetitle8: makeNodeComponent("casetitle8"),
    img8: makeNodeComponent("img8"),
    li1: makeNodeComponent("li1"),
    blankpot: makeNodeComponent("blankpot"),
    context: makeNodeComponent("context"),
    line: makeNodeComponent("line"),
    casetitle: makeNodeComponent("casetitle"),
    li2: makeNodeComponent("li2"),
    blankpot3: makeNodeComponent("blankpot3"),
    context3: makeNodeComponent("context3"),
    line3: makeNodeComponent("line3"),
    casetitle3: makeNodeComponent("casetitle3"),
    img3: makeNodeComponent("img3"),
    li3: makeNodeComponent("li3"),
    blankpot4: makeNodeComponent("blankpot4"),
    context4: makeNodeComponent("context4"),
    line4: makeNodeComponent("line4"),
    casetitle4: makeNodeComponent("casetitle4"),
    img4: makeNodeComponent("img4"),
    li4: makeNodeComponent("li4"),
    blankpot5: makeNodeComponent("blankpot5"),
    context5: makeNodeComponent("context5"),
    line5: makeNodeComponent("line5"),
    casetitle5: makeNodeComponent("casetitle5"),
    img5: makeNodeComponent("img5"),
    li5: makeNodeComponent("li5"),
    blankpot6: makeNodeComponent("blankpot6"),
    context6: makeNodeComponent("context6"),
    line6: makeNodeComponent("line6"),
    casetitle6: makeNodeComponent("casetitle6"),
    img6: makeNodeComponent("img6"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicProject
    internalVariantProps: PlasmicProject__VariantProps,
    internalArgProps: PlasmicProject__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "project",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProject;
/* prettier-ignore-end */
